{"version":3,"sources":["Commponents/NavBar/NavBar.module.css","Commponents/Message/Message.module.css","Commponents/Qualities/Qualities.module.css","Container.module.css","Commponents/Name/MyName.module.css","Commponents/Sib/Sib.module.css","Commponents/Sib/Input/Input.module.css","Commponents/Message/Message.jsx","Commponents/Name/MyName.jsx","Commponents/Qualities/Qualities.jsx","Commponents/Sib/Button/Button.jsx","Commponents/Sib/Input/Input.jsx","Commponents/Sib/Span/Span.jsx","Commponents/Sib/Sib.jsx","Commponents/NavBar/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Message","className","styles","message","time","MyName","myName","Qualities","props","qualitiesItem","title","id","map","el","num","lishka","key","qualities","Button","onClick","this","addClickHandler","React","Component","Input","onKeyPress","e","inputClassNameError","error","type","value","onChange","onTitleChanged","Span","startNumber","Sib","state","text","newText","onChangeText","setState","currentTarget","qwe","newMessage","sib","NavBar","navBar","menu","to","drop","App","container","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.27d6fb9d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__1TrBY\",\"menu\":\"NavBar_menu__3N60p\",\"drop\":\"NavBar_drop__2GvLN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__13h0P\",\"time\":\"Message_time__2L1co\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lishka\":\"Qualities_lishka__d59Ol\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2tTuK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myName\":\"MyName_myName__1dquq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sib\":\"Sib_sib__1Hc7v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Input_error__K0lYy\"};","import React from 'react';\r\nimport styles from './Message.module.css';\r\n\r\n\r\n\r\nconst Message = () => {\r\n    return  (\r\n        <div className={styles.message}>\r\n            <h6>Zhenya Zinuk</h6>\r\n            <span>adipihjdurnzdpahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhsicingelit. Distinctio doloremque eius  facere laudantium nobis reprehenderit tempore. Ea, enim, recusandae!</span>\r\n            <div className={styles.time}>\r\n                07:40 PM\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport styles from './MyName.module.css';\r\n\r\n\r\n\r\nconst MyName = () => {\r\n\r\n    return  (\r\n        <div className={styles.myName}>\r\n            <h3>Zhenya Zinuk</h3>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyName;","import React from 'react';\r\nimport styles from './Qualities.module.css';\r\n\r\n\r\nconst Qualities = (props) => {\r\n    let newQualities = [\r\n        {title: \"Коммунист\", id: 1},\r\n        {title: \"Рационалист\", id: 2},\r\n        {title: \"Анимешник\", id: 3}\r\n\r\n    ]\r\n\r\n    let qualitiesItem = newQualities.map((el, num) => {\r\n\r\n        if (num === 1)\r\n            return (<li className={styles.lishka} key={el.id}>{el.title}</li>)\r\n        else\r\n            return (<li key={el.id}>{el.title}</li>)\r\n    });\r\n\r\n\r\n    return (\r\n        <div className={styles.qualities}>\r\n\r\n            <ul>{qualitiesItem}</ul>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Qualities;","import React from 'react';\r\n\r\n\r\nclass Button extends React.Component {\r\n\r\n\r\n    render() {\r\n        return <button onClick={this.props.addClickHandler}>Отправить</button>\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport styles from './Input.module.css'\r\n\r\n\r\n\r\nclass Input extends React.Component {\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.props.addClickHandler()\r\n        }\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        const inputClassNameError = this.props.error ? styles.error : '';\r\n\r\n        return <input\r\n            className={inputClassNameError}\r\n            type=\"text\"\r\n            onKeyPress={this.onKeyPress}\r\n            value={this.props.title}\r\n            onChange={this.props.onTitleChanged}\r\n        />\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\n\r\nclass Span extends React.Component {\r\n\r\n\r\n    render() {\r\n        return <span>{this.props.startNumber}</span>\r\n    }\r\n}\r\n\r\nexport default Span;","import React from 'react';\r\nimport styles from './Sib.module.css';\r\nimport Button from \"./Button/Button\";\r\nimport Input from \"./Input/Input\";\r\nimport Span from \"./Span/Span\";\r\n\r\n\r\nclass Sib extends React.Component {\r\n\r\n    state = {\r\n        startNumber: 0,\r\n        text: '',\r\n        error: false,\r\n        title: \"\"\r\n    }\r\n\r\n\r\n    addClickHandler = () => {\r\n        let newText = this.state.title;\r\n\r\n        if (newText !== '') {\r\n            this.onChangeText(' Привет ' + newText); // вызываем нашу функцию onChangeText\r\n            this.setState({startNumber: this.state.startNumber + 1})\r\n            this.setState({error: false, title: ''});\r\n        } else {\r\n            this.setState({error: true});\r\n        }\r\n\r\n\r\n    };\r\n\r\n    onTitleChanged = (e) => {\r\n        this.setState({title: e.currentTarget.value})\r\n    }\r\n\r\n    onChangeText = (qwe) => { // передаем через парметры новое значение для функции\r\n        let newMessage = [...this.state.text, qwe]; // копируем придущую функцию-массив addClickHandler, а после него всталяет новый парамент значение <qwe>\r\n        this.setState({text: newMessage}) // заменяем наш объект text на новый объект newMessage\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.sib}>\r\n\r\n                <Span startNumber={this.startNumber}/>\r\n                <Input error={this.state.error}\r\n                       addClickHandler={this.addClickHandler}\r\n                       title={this.state.title}\r\n                       onTitleChanged={this.onTitleChanged}\r\n\r\n                />\r\n                <Button addClickHandler={this.addClickHandler}/>\r\n                <p>{this.state.text}</p>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Sib;","import React from 'react';\r\nimport styles from './NavBar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\nconst NavBar = () => {\r\n\r\n    return (\r\n        <nav className={styles.navBar}>\r\n            <NavLink className={styles.menu} to=\"/all\">\r\n                МЕНЮ\r\n                <div className={styles.drop}>\r\n                    <div><NavLink to=\"/sib\">Понедельник</NavLink></div>\r\n                    <div><NavLink to=\"/#\">Вторник</NavLink></div>\r\n                </div>\r\n            </NavLink>\r\n\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport styles from \"./Container.module.css\";\r\nimport Message from \"./Commponents/Message/Message\";\r\nimport MyName from \"./Commponents/Name/MyName\";\r\nimport Qualities from \"./Commponents/Qualities/Qualities\";\r\nimport Sib from \"./Commponents/Sib/Sib\";\r\nimport NavBar from \"./Commponents/NavBar/NavBar\";\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\n\r\n\r\nconst App = () => {\r\n\r\n    let nameQualities = [\r\n        {qualitie: \"Punctual\", id: \"1\"},\r\n        {qualitie: \"Sportsman\", id: \"2\"},\r\n        {qualitie: \"Сonfident\", id: \"3\"}\r\n    ];\r\n    return (\r\n\r\n        <HashRouter>\r\n            <div className=\"App\">\r\n                <div className={styles.container}>\r\n                    <NavBar/>\r\n\r\n                    <Route path=\"/all\" render={() => <MyName/> }/>\r\n                    <Route path=\"/all\" render={() => <Qualities/> }/>\r\n                    <Route path=\"/all\" render={() => <Message/> }/>\r\n                    <Route path=\"/sib\" render={() => <Sib /> }/>\r\n\r\n                </div>\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}
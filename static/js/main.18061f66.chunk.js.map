{"version":3,"sources":["Commponents/Message/Message.module.css","Commponents/Qualities/Qualities.module.css","Container.module.css","Commponents/Name/MyName.module.css","Commponents/Sib/Sib.module.css","Commponents/Message/Message.jsx","Commponents/Name/MyName.jsx","Commponents/Qualities/Qualities.jsx","Commponents/Sib/Button/Button.jsx","Commponents/Sib/Input/Input.jsx","Commponents/Sib/Span/Span.jsx","Commponents/Sib/Sib.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Message","className","styles","message","time","MyName","myName","Qualities","props","qualitiesItem","title","id","map","el","num","lishka","key","qualities","Button","onClick","this","addClickHandler","React","Component","Input","ref","newMessageText","type","Span","startNumber","Sib","createRef","state","text","newText","current","value","onChangeText","setState","qwe","newMessage","sib","App","container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,wB,gBCA5DD,EAAOC,QAAU,CAAC,OAAS,4B,kBCA3BD,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,oB,wKCgBVC,EAZC,WACZ,OACI,yBAAKC,UAAWC,IAAOC,SACnB,4CACA,yMACA,yBAAKF,UAAWC,IAAOE,MAAvB,c,iBCIGC,EATA,WAEX,OACI,yBAAKJ,UAAWC,IAAOI,QACnB,8C,gBCqBGC,EA1BG,SAACC,GACf,IAOIC,EAPe,CACf,CAACC,MAAO,yDAAaC,GAAI,GACzB,CAACD,MAAO,qEAAeC,GAAI,GAC3B,CAACD,MAAO,yDAAaC,GAAI,IAIIC,KAAI,SAACC,EAAIC,GAEtC,OAAY,IAARA,EACQ,wBAAIb,UAAWC,IAAOa,OAAQC,IAAKH,EAAGF,IAAKE,EAAGH,OAE9C,wBAAIM,IAAKH,EAAGF,IAAKE,EAAGH,UAIpC,OACI,yBAAKT,UAAWC,IAAOe,WAEnB,4BAAKR,K,qDCbFS,E,uKAJP,OAAO,4BAAQC,QAASC,KAAKZ,MAAMa,iBAA5B,8D,GAJMC,IAAMC,WCQZC,E,uKAJP,OAAO,2BAAOC,IAAKL,KAAKZ,MAAMkB,eAAgBC,KAAK,a,GAJvCL,IAAMC,WCQXK,E,uKAJP,OAAO,8BAAOR,KAAKZ,MAAMqB,iB,GAJdP,IAAMC,WC4CVO,E,4MArCXJ,eAAiBJ,IAAMS,Y,EAEvBC,MAAQ,CACJH,YAAa,EACbI,KAAM,I,EAKVZ,gBAAkB,WACd,IAAIa,EAAU,EAAKR,eAAeS,QAAQC,MAC1C,EAAKV,eAAeS,QAAQC,MAAQ,GACpC,EAAKC,aAAa,yCAAaH,GAC/B,EAAKI,SAAS,CAACT,YAAa,EAAKG,MAAMH,YAAc,K,EAGzDQ,aAAe,SAACE,GACZ,IAAIC,EAAU,sBAAO,EAAKR,MAAMC,MAAlB,CAAwBM,IACtC,EAAKD,SAAS,CAACL,KAAMO,K,uDAKrB,OACI,yBAAKvC,UAAWC,IAAOuC,KAEnB,kBAAC,EAAD,CAAMZ,YAAaT,KAAKS,cACxB,kBAAC,EAAD,CAAOH,eAAgBN,KAAKM,iBAC5B,kBAAC,EAAD,CAAQL,gBAAiBD,KAAKC,kBAC9B,2BAAID,KAAKY,MAAMC,W,GAhCbX,IAAMC,WCiBTmB,EAhBH,WAGR,OACI,yBAAKzC,UAAU,OAEX,yBAAKA,UAAWC,IAAOyC,WACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1D,c","file":"static/js/main.18061f66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__PL7XD\",\"time\":\"Message_time__1FoyE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lishka\":\"Qualities_lishka__2c1hh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__iWfNu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myName\":\"MyName_myName__3pwB-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Sib_form__3HfKz\"};","import React from 'react';\r\nimport styles from './Message.module.css';\r\n\r\n\r\n\r\nconst Message = () => {\r\n    return  (\r\n        <div className={styles.message}>\r\n            <h6>Zhenya Zinuk</h6>\r\n            <span>adipihjdurnzdpahhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhsicingelit. Distinctio doloremque eius  facere laudantium nobis reprehenderit tempore. Ea, enim, recusandae!</span>\r\n            <div className={styles.time}>\r\n                07:40 PM\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport styles from './MyName.module.css';\r\n\r\n\r\n\r\nconst MyName = () => {\r\n\r\n    return  (\r\n        <div className={styles.myName}>\r\n            <h3>Zhenya Zinuk</h3>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyName;","import React from 'react';\r\nimport styles from './Qualities.module.css';\r\n\r\n\r\nconst Qualities = (props) => {\r\n    let newQualities = [\r\n        {title: \"Коммунист\", id: 1},\r\n        {title: \"Рационалист\", id: 2},\r\n        {title: \"Анимешник\", id: 3}\r\n\r\n    ]\r\n\r\n    let qualitiesItem = newQualities.map((el, num) => {\r\n\r\n        if (num === 1)\r\n            return (<li className={styles.lishka} key={el.id}>{el.title}</li>)\r\n        else\r\n            return (<li key={el.id}>{el.title}</li>)\r\n    });\r\n\r\n\r\n    return (\r\n        <div className={styles.qualities}>\r\n\r\n            <ul>{qualitiesItem}</ul>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default Qualities;","import React from 'react';\r\n\r\n\r\nclass Button extends React.Component {\r\n\r\n\r\n    render() {\r\n        return <button onClick={this.props.addClickHandler}>Отправить</button>\r\n    }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\n\r\nclass Input extends React.Component {\r\n\r\n\r\n    render() {\r\n        return <input ref={this.props.newMessageText} type=\"text\"/>\r\n    }\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\n\r\nclass Span extends React.Component {\r\n\r\n\r\n    render() {\r\n        return <span>{this.props.startNumber}</span>\r\n    }\r\n}\r\n\r\nexport default Span;","import React from 'react';\r\nimport styles from './Sib.module.css';\r\nimport Button from \"./Button/Button\";\r\nimport Input from \"./Input/Input\";\r\nimport Span from \"./Span/Span\";\r\n\r\n\r\nclass Sib extends React.Component {\r\n\r\n\r\n    newMessageText = React.createRef();\r\n\r\n    state = {\r\n        startNumber: 0,\r\n        text: '',\r\n\r\n    }\r\n\r\n\r\n    addClickHandler = () => {\r\n        let newText = this.newMessageText.current.value;\r\n        this.newMessageText.current.value = \"\";\r\n        this.onChangeText(\" Привет \" + newText); // вызываем нашу функцию onChangeText\r\n        this.setState({startNumber: this.state.startNumber + 1})\r\n    };\r\n\r\n    onChangeText = (qwe) => { // передаем через парметры новое значение для функции\r\n        let newMessage = [...this.state.text, qwe]; // копируем придущую функцию-массив addClickHandler, а после него всталяет новый парамент значение <qwe>\r\n        this.setState({text: newMessage}) // заменяем наш объект text на новый объект newMessage\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.sib}>\r\n\r\n                <Span startNumber={this.startNumber}/>\r\n                <Input newMessageText={this.newMessageText}/>\r\n                <Button addClickHandler={this.addClickHandler}/>\r\n                <p>{this.state.text}</p>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Sib;","import React from 'react';\nimport styles from \"./Container.module.css\";\nimport Message from \"./Commponents/Message/Message\";\nimport MyName from \"./Commponents/Name/MyName\";\nimport Qualities from \"./Commponents/Qualities/Qualities\";\nimport Sib from \"./Commponents/Sib/Sib\";\n\n\nconst App = () => {\n\n\n    return (\n        <div className=\"App\">\n\n            <div className={styles.container}>\n                <Sib/>\n                <MyName/>\n                <Qualities/>\n                <Message/>\n\n            </div>\n        </div>\n    );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}